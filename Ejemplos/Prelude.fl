-- Pasar izquierda
def move_left = zero_left { succ_left } delete_right;

-- Pasar derecha  
def move_right = zero_right { succ_right } delete_left;

-- Duplicar izquierda
def double_left = zero_right { succ_right } move_left;

-- Duplicar derecha
def double_right = zero_left { succ_left } move_right;

-- Intercambiar extremos
def swap = move_right zero_left move_left zero_left
           { succ_left move_right move_right succ_left move_left move_left }
           delete_right delete_left move_right;

-- Predecesor izquierda
def pred_left = zero_right zero_right succ_right
                { succ_right move_left succ_right move_right }
                delete_left delete_right move_left;

-- Predecesor izquierda persistente
def pred_left_p = zero_right zero_right succ_right
                  { succ_right move_left succ_right move_right }
                  delete_right move_left;

-- Agrega 0 a la izquierda, tantos como sea el numero de la derecha
def agregar_ceros_left = z_l { move_right z_l s_r move_left } d_l;

-- Chequea si el 0 esta en la lista (0 false, 1 true en la izquierda)
def check_zero = z_r {swap move_right} { d_r } z_l s_l;

const empty = [] <TList>;
